// This file was generated by counterfeiter
package filterfakes

import (
	"net/http"
	"sync"

	"github.com/dpb587/ssoca/auth"
	"github.com/dpb587/ssoca/authz/filter"
)

type FakeRequirement struct {
	IsSatisfiedStub        func(*http.Request, *auth.Token) (bool, error)
	isSatisfiedMutex       sync.RWMutex
	isSatisfiedArgsForCall []struct {
		arg1 *http.Request
		arg2 *auth.Token
	}
	isSatisfiedReturns struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequirement) IsSatisfied(arg1 *http.Request, arg2 *auth.Token) (bool, error) {
	fake.isSatisfiedMutex.Lock()
	fake.isSatisfiedArgsForCall = append(fake.isSatisfiedArgsForCall, struct {
		arg1 *http.Request
		arg2 *auth.Token
	}{arg1, arg2})
	fake.recordInvocation("IsSatisfied", []interface{}{arg1, arg2})
	fake.isSatisfiedMutex.Unlock()
	if fake.IsSatisfiedStub != nil {
		return fake.IsSatisfiedStub(arg1, arg2)
	}
	return fake.isSatisfiedReturns.result1, fake.isSatisfiedReturns.result2
}

func (fake *FakeRequirement) IsSatisfiedCallCount() int {
	fake.isSatisfiedMutex.RLock()
	defer fake.isSatisfiedMutex.RUnlock()
	return len(fake.isSatisfiedArgsForCall)
}

func (fake *FakeRequirement) IsSatisfiedArgsForCall(i int) (*http.Request, *auth.Token) {
	fake.isSatisfiedMutex.RLock()
	defer fake.isSatisfiedMutex.RUnlock()
	return fake.isSatisfiedArgsForCall[i].arg1, fake.isSatisfiedArgsForCall[i].arg2
}

func (fake *FakeRequirement) IsSatisfiedReturns(result1 bool, result2 error) {
	fake.IsSatisfiedStub = nil
	fake.isSatisfiedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeRequirement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isSatisfiedMutex.RLock()
	defer fake.isSatisfiedMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRequirement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ filter.Requirement = new(FakeRequirement)
