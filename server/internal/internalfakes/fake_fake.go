// This file was generated by counterfeiter
package internalfakes

import (
	"sync"

	"github.com/dpb587/ssoca/server/internal"
)

type FakeFake struct {
	RouteStub        func() string
	routeMutex       sync.RWMutex
	routeArgsForCall []struct{}
	routeReturns     struct {
		result1 string
	}
	ExecuteStub        func()
	executeMutex       sync.RWMutex
	executeArgsForCall []struct{}
	invocations        map[string][][]interface{}
	invocationsMutex   sync.RWMutex
}

func (fake *FakeFake) Route() string {
	fake.routeMutex.Lock()
	fake.routeArgsForCall = append(fake.routeArgsForCall, struct{}{})
	fake.recordInvocation("Route", []interface{}{})
	fake.routeMutex.Unlock()
	if fake.RouteStub != nil {
		return fake.RouteStub()
	}
	return fake.routeReturns.result1
}

func (fake *FakeFake) RouteCallCount() int {
	fake.routeMutex.RLock()
	defer fake.routeMutex.RUnlock()
	return len(fake.routeArgsForCall)
}

func (fake *FakeFake) RouteReturns(result1 string) {
	fake.RouteStub = nil
	fake.routeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeFake) Execute() {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct{}{})
	fake.recordInvocation("Execute", []interface{}{})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		fake.ExecuteStub()
	}
}

func (fake *FakeFake) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.routeMutex.RLock()
	defer fake.routeMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ internal.Fake = new(FakeFake)
