// This file was generated by counterfeiter
package reqfakes

import (
	"net/http"
	"sync"

	"github.com/dpb587/ssoca/auth"
	"github.com/dpb587/ssoca/server/service/req"
)

type FakeRouteHandler struct {
	RouteStub        func() string
	routeMutex       sync.RWMutex
	routeArgsForCall []struct{}
	routeReturns     struct {
		result1 string
	}
	ExecuteStub        func(req.Request) error
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 req.Request
	}
	executeReturns struct {
		result1 error
	}
	VerifyAuthorizationStub        func(*http.Request, *auth.Token) error
	verifyAuthorizationMutex       sync.RWMutex
	verifyAuthorizationArgsForCall []struct {
		arg1 *http.Request
		arg2 *auth.Token
	}
	verifyAuthorizationReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouteHandler) Route() string {
	fake.routeMutex.Lock()
	fake.routeArgsForCall = append(fake.routeArgsForCall, struct{}{})
	fake.recordInvocation("Route", []interface{}{})
	fake.routeMutex.Unlock()
	if fake.RouteStub != nil {
		return fake.RouteStub()
	}
	return fake.routeReturns.result1
}

func (fake *FakeRouteHandler) RouteCallCount() int {
	fake.routeMutex.RLock()
	defer fake.routeMutex.RUnlock()
	return len(fake.routeArgsForCall)
}

func (fake *FakeRouteHandler) RouteReturns(result1 string) {
	fake.RouteStub = nil
	fake.routeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRouteHandler) Execute(arg1 req.Request) error {
	fake.executeMutex.Lock()
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 req.Request
	}{arg1})
	fake.recordInvocation("Execute", []interface{}{arg1})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1)
	}
	return fake.executeReturns.result1
}

func (fake *FakeRouteHandler) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeRouteHandler) ExecuteArgsForCall(i int) req.Request {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return fake.executeArgsForCall[i].arg1
}

func (fake *FakeRouteHandler) ExecuteReturns(result1 error) {
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteHandler) VerifyAuthorization(arg1 *http.Request, arg2 *auth.Token) error {
	fake.verifyAuthorizationMutex.Lock()
	fake.verifyAuthorizationArgsForCall = append(fake.verifyAuthorizationArgsForCall, struct {
		arg1 *http.Request
		arg2 *auth.Token
	}{arg1, arg2})
	fake.recordInvocation("VerifyAuthorization", []interface{}{arg1, arg2})
	fake.verifyAuthorizationMutex.Unlock()
	if fake.VerifyAuthorizationStub != nil {
		return fake.VerifyAuthorizationStub(arg1, arg2)
	}
	return fake.verifyAuthorizationReturns.result1
}

func (fake *FakeRouteHandler) VerifyAuthorizationCallCount() int {
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return len(fake.verifyAuthorizationArgsForCall)
}

func (fake *FakeRouteHandler) VerifyAuthorizationArgsForCall(i int) (*http.Request, *auth.Token) {
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return fake.verifyAuthorizationArgsForCall[i].arg1, fake.verifyAuthorizationArgsForCall[i].arg2
}

func (fake *FakeRouteHandler) VerifyAuthorizationReturns(result1 error) {
	fake.VerifyAuthorizationStub = nil
	fake.verifyAuthorizationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouteHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.routeMutex.RLock()
	defer fake.routeMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRouteHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ req.RouteHandler = new(FakeRouteHandler)
