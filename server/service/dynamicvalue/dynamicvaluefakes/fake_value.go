// Code generated by counterfeiter. DO NOT EDIT.
package dynamicvaluefakes

import (
	"net/http"
	"sync"

	"github.com/dpb587/ssoca/auth"
	"github.com/dpb587/ssoca/server/service/dynamicvalue"
)

type FakeValue struct {
	EvaluateStub        func(*http.Request, *auth.Token) (string, error)
	evaluateMutex       sync.RWMutex
	evaluateArgsForCall []struct {
		arg1 *http.Request
		arg2 *auth.Token
	}
	evaluateReturns struct {
		result1 string
		result2 error
	}
	evaluateReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValue) Evaluate(arg1 *http.Request, arg2 *auth.Token) (string, error) {
	fake.evaluateMutex.Lock()
	ret, specificReturn := fake.evaluateReturnsOnCall[len(fake.evaluateArgsForCall)]
	fake.evaluateArgsForCall = append(fake.evaluateArgsForCall, struct {
		arg1 *http.Request
		arg2 *auth.Token
	}{arg1, arg2})
	fake.recordInvocation("Evaluate", []interface{}{arg1, arg2})
	fake.evaluateMutex.Unlock()
	if fake.EvaluateStub != nil {
		return fake.EvaluateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.evaluateReturns.result1, fake.evaluateReturns.result2
}

func (fake *FakeValue) EvaluateCallCount() int {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return len(fake.evaluateArgsForCall)
}

func (fake *FakeValue) EvaluateArgsForCall(i int) (*http.Request, *auth.Token) {
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return fake.evaluateArgsForCall[i].arg1, fake.evaluateArgsForCall[i].arg2
}

func (fake *FakeValue) EvaluateReturns(result1 string, result2 error) {
	fake.EvaluateStub = nil
	fake.evaluateReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeValue) EvaluateReturnsOnCall(i int, result1 string, result2 error) {
	fake.EvaluateStub = nil
	if fake.evaluateReturnsOnCall == nil {
		fake.evaluateReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.evaluateReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeValue) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.evaluateMutex.RLock()
	defer fake.evaluateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeValue) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dynamicvalue.Value = new(FakeValue)
