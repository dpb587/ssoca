// Code generated by counterfeiter. DO NOT EDIT.
package certauthfakes

import (
	"sync"

	"github.com/dpb587/ssoca/certauth"
)

type FakeProviderFactory struct {
	CreateStub        func(string, map[string]interface{}) (certauth.Provider, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
		arg2 map[string]interface{}
	}
	createReturns struct {
		result1 certauth.Provider
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 certauth.Provider
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProviderFactory) Create(arg1 string, arg2 map[string]interface{}) (certauth.Provider, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
		arg2 map[string]interface{}
	}{arg1, arg2})
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProviderFactory) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeProviderFactory) CreateCalls(stub func(string, map[string]interface{}) (certauth.Provider, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeProviderFactory) CreateArgsForCall(i int) (string, map[string]interface{}) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeProviderFactory) CreateReturns(result1 certauth.Provider, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 certauth.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderFactory) CreateReturnsOnCall(i int, result1 certauth.Provider, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 certauth.Provider
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 certauth.Provider
		result2 error
	}{result1, result2}
}

func (fake *FakeProviderFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProviderFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ certauth.ProviderFactory = new(FakeProviderFactory)
