// This file was generated by counterfeiter
package certauthfakes

import (
	"crypto/x509"
	"sync"

	"github.com/dpb587/ssoca/certauth"
	"github.com/sirupsen/logrus"
	"golang.org/x/crypto/ssh"
)

type FakeProvider struct {
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	GetCertificateStub        func() (*x509.Certificate, error)
	getCertificateMutex       sync.RWMutex
	getCertificateArgsForCall []struct{}
	getCertificateReturns     struct {
		result1 *x509.Certificate
		result2 error
	}
	GetCertificatePEMStub        func() (string, error)
	getCertificatePEMMutex       sync.RWMutex
	getCertificatePEMArgsForCall []struct{}
	getCertificatePEMReturns     struct {
		result1 string
		result2 error
	}
	SignCertificateStub        func(*x509.Certificate, interface{}, logrus.Fields) ([]byte, error)
	signCertificateMutex       sync.RWMutex
	signCertificateArgsForCall []struct {
		arg1 *x509.Certificate
		arg2 interface{}
		arg3 logrus.Fields
	}
	signCertificateReturns struct {
		result1 []byte
		result2 error
	}
	SignSSHCertificateStub        func(*ssh.Certificate, logrus.Fields) error
	signSSHCertificateMutex       sync.RWMutex
	signSSHCertificateArgsForCall []struct {
		arg1 *ssh.Certificate
		arg2 logrus.Fields
	}
	signSSHCertificateReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProvider) Name() string {
	fake.nameMutex.Lock()
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	return fake.nameReturns.result1
}

func (fake *FakeProvider) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeProvider) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeProvider) GetCertificate() (*x509.Certificate, error) {
	fake.getCertificateMutex.Lock()
	fake.getCertificateArgsForCall = append(fake.getCertificateArgsForCall, struct{}{})
	fake.recordInvocation("GetCertificate", []interface{}{})
	fake.getCertificateMutex.Unlock()
	if fake.GetCertificateStub != nil {
		return fake.GetCertificateStub()
	}
	return fake.getCertificateReturns.result1, fake.getCertificateReturns.result2
}

func (fake *FakeProvider) GetCertificateCallCount() int {
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	return len(fake.getCertificateArgsForCall)
}

func (fake *FakeProvider) GetCertificateReturns(result1 *x509.Certificate, result2 error) {
	fake.GetCertificateStub = nil
	fake.getCertificateReturns = struct {
		result1 *x509.Certificate
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) GetCertificatePEM() (string, error) {
	fake.getCertificatePEMMutex.Lock()
	fake.getCertificatePEMArgsForCall = append(fake.getCertificatePEMArgsForCall, struct{}{})
	fake.recordInvocation("GetCertificatePEM", []interface{}{})
	fake.getCertificatePEMMutex.Unlock()
	if fake.GetCertificatePEMStub != nil {
		return fake.GetCertificatePEMStub()
	}
	return fake.getCertificatePEMReturns.result1, fake.getCertificatePEMReturns.result2
}

func (fake *FakeProvider) GetCertificatePEMCallCount() int {
	fake.getCertificatePEMMutex.RLock()
	defer fake.getCertificatePEMMutex.RUnlock()
	return len(fake.getCertificatePEMArgsForCall)
}

func (fake *FakeProvider) GetCertificatePEMReturns(result1 string, result2 error) {
	fake.GetCertificatePEMStub = nil
	fake.getCertificatePEMReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) SignCertificate(arg1 *x509.Certificate, arg2 interface{}, arg3 logrus.Fields) ([]byte, error) {
	fake.signCertificateMutex.Lock()
	fake.signCertificateArgsForCall = append(fake.signCertificateArgsForCall, struct {
		arg1 *x509.Certificate
		arg2 interface{}
		arg3 logrus.Fields
	}{arg1, arg2, arg3})
	fake.recordInvocation("SignCertificate", []interface{}{arg1, arg2, arg3})
	fake.signCertificateMutex.Unlock()
	if fake.SignCertificateStub != nil {
		return fake.SignCertificateStub(arg1, arg2, arg3)
	}
	return fake.signCertificateReturns.result1, fake.signCertificateReturns.result2
}

func (fake *FakeProvider) SignCertificateCallCount() int {
	fake.signCertificateMutex.RLock()
	defer fake.signCertificateMutex.RUnlock()
	return len(fake.signCertificateArgsForCall)
}

func (fake *FakeProvider) SignCertificateArgsForCall(i int) (*x509.Certificate, interface{}, logrus.Fields) {
	fake.signCertificateMutex.RLock()
	defer fake.signCertificateMutex.RUnlock()
	return fake.signCertificateArgsForCall[i].arg1, fake.signCertificateArgsForCall[i].arg2, fake.signCertificateArgsForCall[i].arg3
}

func (fake *FakeProvider) SignCertificateReturns(result1 []byte, result2 error) {
	fake.SignCertificateStub = nil
	fake.signCertificateReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeProvider) SignSSHCertificate(arg1 *ssh.Certificate, arg2 logrus.Fields) error {
	fake.signSSHCertificateMutex.Lock()
	fake.signSSHCertificateArgsForCall = append(fake.signSSHCertificateArgsForCall, struct {
		arg1 *ssh.Certificate
		arg2 logrus.Fields
	}{arg1, arg2})
	fake.recordInvocation("SignSSHCertificate", []interface{}{arg1, arg2})
	fake.signSSHCertificateMutex.Unlock()
	if fake.SignSSHCertificateStub != nil {
		return fake.SignSSHCertificateStub(arg1, arg2)
	}
	return fake.signSSHCertificateReturns.result1
}

func (fake *FakeProvider) SignSSHCertificateCallCount() int {
	fake.signSSHCertificateMutex.RLock()
	defer fake.signSSHCertificateMutex.RUnlock()
	return len(fake.signSSHCertificateArgsForCall)
}

func (fake *FakeProvider) SignSSHCertificateArgsForCall(i int) (*ssh.Certificate, logrus.Fields) {
	fake.signSSHCertificateMutex.RLock()
	defer fake.signSSHCertificateMutex.RUnlock()
	return fake.signSSHCertificateArgsForCall[i].arg1, fake.signSSHCertificateArgsForCall[i].arg2
}

func (fake *FakeProvider) SignSSHCertificateReturns(result1 error) {
	fake.SignSSHCertificateStub = nil
	fake.signSSHCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	fake.getCertificateMutex.RLock()
	defer fake.getCertificateMutex.RUnlock()
	fake.getCertificatePEMMutex.RLock()
	defer fake.getCertificatePEMMutex.RUnlock()
	fake.signCertificateMutex.RLock()
	defer fake.signCertificateMutex.RUnlock()
	fake.signSSHCertificateMutex.RLock()
	defer fake.signSSHCertificateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ certauth.Provider = new(FakeProvider)
