// This file was generated by counterfeiter
package authfakes

import (
	"sync"

	"github.com/dpb587/ssoca/auth"
)

type FakeToken struct {
	UsernameStub        func() string
	usernameMutex       sync.RWMutex
	usernameArgsForCall []struct{}
	usernameReturns     struct {
		result1 string
	}
	AttributesStub        func() map[string]interface{}
	attributesMutex       sync.RWMutex
	attributesArgsForCall []struct{}
	attributesReturns     struct {
		result1 map[string]interface{}
	}
	HasAttributeStub        func(string) bool
	hasAttributeMutex       sync.RWMutex
	hasAttributeArgsForCall []struct {
		arg1 string
	}
	hasAttributeReturns struct {
		result1 bool
	}
	GetAttributeStub        func(string) (interface{}, error)
	getAttributeMutex       sync.RWMutex
	getAttributeArgsForCall []struct {
		arg1 string
	}
	getAttributeReturns struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeToken) Username() string {
	fake.usernameMutex.Lock()
	fake.usernameArgsForCall = append(fake.usernameArgsForCall, struct{}{})
	fake.recordInvocation("Username", []interface{}{})
	fake.usernameMutex.Unlock()
	if fake.UsernameStub != nil {
		return fake.UsernameStub()
	}
	return fake.usernameReturns.result1
}

func (fake *FakeToken) UsernameCallCount() int {
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	return len(fake.usernameArgsForCall)
}

func (fake *FakeToken) UsernameReturns(result1 string) {
	fake.UsernameStub = nil
	fake.usernameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeToken) Attributes() map[string]interface{} {
	fake.attributesMutex.Lock()
	fake.attributesArgsForCall = append(fake.attributesArgsForCall, struct{}{})
	fake.recordInvocation("Attributes", []interface{}{})
	fake.attributesMutex.Unlock()
	if fake.AttributesStub != nil {
		return fake.AttributesStub()
	}
	return fake.attributesReturns.result1
}

func (fake *FakeToken) AttributesCallCount() int {
	fake.attributesMutex.RLock()
	defer fake.attributesMutex.RUnlock()
	return len(fake.attributesArgsForCall)
}

func (fake *FakeToken) AttributesReturns(result1 map[string]interface{}) {
	fake.AttributesStub = nil
	fake.attributesReturns = struct {
		result1 map[string]interface{}
	}{result1}
}

func (fake *FakeToken) HasAttribute(arg1 string) bool {
	fake.hasAttributeMutex.Lock()
	fake.hasAttributeArgsForCall = append(fake.hasAttributeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("HasAttribute", []interface{}{arg1})
	fake.hasAttributeMutex.Unlock()
	if fake.HasAttributeStub != nil {
		return fake.HasAttributeStub(arg1)
	}
	return fake.hasAttributeReturns.result1
}

func (fake *FakeToken) HasAttributeCallCount() int {
	fake.hasAttributeMutex.RLock()
	defer fake.hasAttributeMutex.RUnlock()
	return len(fake.hasAttributeArgsForCall)
}

func (fake *FakeToken) HasAttributeArgsForCall(i int) string {
	fake.hasAttributeMutex.RLock()
	defer fake.hasAttributeMutex.RUnlock()
	return fake.hasAttributeArgsForCall[i].arg1
}

func (fake *FakeToken) HasAttributeReturns(result1 bool) {
	fake.HasAttributeStub = nil
	fake.hasAttributeReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeToken) GetAttribute(arg1 string) (interface{}, error) {
	fake.getAttributeMutex.Lock()
	fake.getAttributeArgsForCall = append(fake.getAttributeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAttribute", []interface{}{arg1})
	fake.getAttributeMutex.Unlock()
	if fake.GetAttributeStub != nil {
		return fake.GetAttributeStub(arg1)
	}
	return fake.getAttributeReturns.result1, fake.getAttributeReturns.result2
}

func (fake *FakeToken) GetAttributeCallCount() int {
	fake.getAttributeMutex.RLock()
	defer fake.getAttributeMutex.RUnlock()
	return len(fake.getAttributeArgsForCall)
}

func (fake *FakeToken) GetAttributeArgsForCall(i int) string {
	fake.getAttributeMutex.RLock()
	defer fake.getAttributeMutex.RUnlock()
	return fake.getAttributeArgsForCall[i].arg1
}

func (fake *FakeToken) GetAttributeReturns(result1 interface{}, result2 error) {
	fake.GetAttributeStub = nil
	fake.getAttributeReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeToken) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.usernameMutex.RLock()
	defer fake.usernameMutex.RUnlock()
	fake.attributesMutex.RLock()
	defer fake.attributesMutex.RUnlock()
	fake.hasAttributeMutex.RLock()
	defer fake.hasAttributeMutex.RUnlock()
	fake.getAttributeMutex.RLock()
	defer fake.getAttributeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeToken) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.Token = new(FakeToken)
