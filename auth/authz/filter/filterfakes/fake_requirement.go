// Code generated by counterfeiter. DO NOT EDIT.
package filterfakes

import (
	"net/http"
	"sync"

	"github.com/dpb587/ssoca/auth"
	"github.com/dpb587/ssoca/auth/authz/filter"
)

type FakeRequirement struct {
	VerifyAuthorizationStub        func(*http.Request, *auth.Token) error
	verifyAuthorizationMutex       sync.RWMutex
	verifyAuthorizationArgsForCall []struct {
		arg1 *http.Request
		arg2 *auth.Token
	}
	verifyAuthorizationReturns struct {
		result1 error
	}
	verifyAuthorizationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRequirement) VerifyAuthorization(arg1 *http.Request, arg2 *auth.Token) error {
	fake.verifyAuthorizationMutex.Lock()
	ret, specificReturn := fake.verifyAuthorizationReturnsOnCall[len(fake.verifyAuthorizationArgsForCall)]
	fake.verifyAuthorizationArgsForCall = append(fake.verifyAuthorizationArgsForCall, struct {
		arg1 *http.Request
		arg2 *auth.Token
	}{arg1, arg2})
	fake.recordInvocation("VerifyAuthorization", []interface{}{arg1, arg2})
	fake.verifyAuthorizationMutex.Unlock()
	if fake.VerifyAuthorizationStub != nil {
		return fake.VerifyAuthorizationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifyAuthorizationReturns.result1
}

func (fake *FakeRequirement) VerifyAuthorizationCallCount() int {
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return len(fake.verifyAuthorizationArgsForCall)
}

func (fake *FakeRequirement) VerifyAuthorizationArgsForCall(i int) (*http.Request, *auth.Token) {
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return fake.verifyAuthorizationArgsForCall[i].arg1, fake.verifyAuthorizationArgsForCall[i].arg2
}

func (fake *FakeRequirement) VerifyAuthorizationReturns(result1 error) {
	fake.VerifyAuthorizationStub = nil
	fake.verifyAuthorizationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRequirement) VerifyAuthorizationReturnsOnCall(i int, result1 error) {
	fake.VerifyAuthorizationStub = nil
	if fake.verifyAuthorizationReturnsOnCall == nil {
		fake.verifyAuthorizationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyAuthorizationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRequirement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyAuthorizationMutex.RLock()
	defer fake.verifyAuthorizationMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRequirement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ filter.Requirement = new(FakeRequirement)
