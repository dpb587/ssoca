// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"sync"

	"github.com/dpb587/ssoca/client/service"
	servicea "github.com/dpb587/ssoca/service"
)

type FakeManager struct {
	AddStub        func(service.Service)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 service.Service
	}
	AddFactoryStub        func(service.ServiceFactory)
	addFactoryMutex       sync.RWMutex
	addFactoryArgsForCall []struct {
		arg1 service.ServiceFactory
	}
	GetStub        func(servicea.Type, string) (service.Service, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 servicea.Type
		arg2 string
	}
	getReturns struct {
		result1 service.Service
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 service.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) Add(arg1 service.Service) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 service.Service
	}{arg1})
	fake.recordInvocation("Add", []interface{}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(arg1)
	}
}

func (fake *FakeManager) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeManager) AddCalls(stub func(service.Service)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeManager) AddArgsForCall(i int) service.Service {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddFactory(arg1 service.ServiceFactory) {
	fake.addFactoryMutex.Lock()
	fake.addFactoryArgsForCall = append(fake.addFactoryArgsForCall, struct {
		arg1 service.ServiceFactory
	}{arg1})
	fake.recordInvocation("AddFactory", []interface{}{arg1})
	fake.addFactoryMutex.Unlock()
	if fake.AddFactoryStub != nil {
		fake.AddFactoryStub(arg1)
	}
}

func (fake *FakeManager) AddFactoryCallCount() int {
	fake.addFactoryMutex.RLock()
	defer fake.addFactoryMutex.RUnlock()
	return len(fake.addFactoryArgsForCall)
}

func (fake *FakeManager) AddFactoryCalls(stub func(service.ServiceFactory)) {
	fake.addFactoryMutex.Lock()
	defer fake.addFactoryMutex.Unlock()
	fake.AddFactoryStub = stub
}

func (fake *FakeManager) AddFactoryArgsForCall(i int) service.ServiceFactory {
	fake.addFactoryMutex.RLock()
	defer fake.addFactoryMutex.RUnlock()
	argsForCall := fake.addFactoryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) Get(arg1 servicea.Type, arg2 string) (service.Service, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 servicea.Type
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeManager) GetCalls(stub func(servicea.Type, string) (service.Service, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeManager) GetArgsForCall(i int) (servicea.Type, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) GetReturns(result1 service.Service, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 service.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetReturnsOnCall(i int, result1 service.Service, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 service.Service
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 service.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.addFactoryMutex.RLock()
	defer fake.addFactoryMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Manager = new(FakeManager)
