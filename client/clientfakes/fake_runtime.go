// This file was generated by counterfeiter
package clientfakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry/bosh-cli/ui"
	"github.com/dpb587/ssoca/client"
	"github.com/dpb587/ssoca/client/config"
	"github.com/dpb587/ssoca/httpclient"
)

type FakeRuntime struct {
	GetEnvironmentStub        func() (config.EnvironmentState, error)
	getEnvironmentMutex       sync.RWMutex
	getEnvironmentArgsForCall []struct{}
	getEnvironmentReturns     struct {
		result1 config.EnvironmentState
		result2 error
	}
	GetEnvironmentNameStub        func() string
	getEnvironmentNameMutex       sync.RWMutex
	getEnvironmentNameArgsForCall []struct{}
	getEnvironmentNameReturns     struct {
		result1 string
	}
	GetConfigManagerStub        func() (config.Manager, error)
	getConfigManagerMutex       sync.RWMutex
	getConfigManagerArgsForCall []struct{}
	getConfigManagerReturns     struct {
		result1 config.Manager
		result2 error
	}
	GetClientStub        func() (httpclient.Client, error)
	getClientMutex       sync.RWMutex
	getClientArgsForCall []struct{}
	getClientReturns     struct {
		result1 httpclient.Client
		result2 error
	}
	GetAuthInterceptClientStub        func() (httpclient.Client, error)
	getAuthInterceptClientMutex       sync.RWMutex
	getAuthInterceptClientArgsForCall []struct{}
	getAuthInterceptClientReturns     struct {
		result1 httpclient.Client
		result2 error
	}
	GetUIStub        func() ui.UI
	getUIMutex       sync.RWMutex
	getUIArgsForCall []struct{}
	getUIReturns     struct {
		result1 ui.UI
	}
	GetStderrStub        func() io.Writer
	getStderrMutex       sync.RWMutex
	getStderrArgsForCall []struct{}
	getStderrReturns     struct {
		result1 io.Writer
	}
	GetStdoutStub        func() io.Writer
	getStdoutMutex       sync.RWMutex
	getStdoutArgsForCall []struct{}
	getStdoutReturns     struct {
		result1 io.Writer
	}
	GetStdinStub        func() io.Reader
	getStdinMutex       sync.RWMutex
	getStdinArgsForCall []struct{}
	getStdinReturns     struct {
		result1 io.Reader
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRuntime) GetEnvironment() (config.EnvironmentState, error) {
	fake.getEnvironmentMutex.Lock()
	fake.getEnvironmentArgsForCall = append(fake.getEnvironmentArgsForCall, struct{}{})
	fake.recordInvocation("GetEnvironment", []interface{}{})
	fake.getEnvironmentMutex.Unlock()
	if fake.GetEnvironmentStub != nil {
		return fake.GetEnvironmentStub()
	}
	return fake.getEnvironmentReturns.result1, fake.getEnvironmentReturns.result2
}

func (fake *FakeRuntime) GetEnvironmentCallCount() int {
	fake.getEnvironmentMutex.RLock()
	defer fake.getEnvironmentMutex.RUnlock()
	return len(fake.getEnvironmentArgsForCall)
}

func (fake *FakeRuntime) GetEnvironmentReturns(result1 config.EnvironmentState, result2 error) {
	fake.GetEnvironmentStub = nil
	fake.getEnvironmentReturns = struct {
		result1 config.EnvironmentState
		result2 error
	}{result1, result2}
}

func (fake *FakeRuntime) GetEnvironmentName() string {
	fake.getEnvironmentNameMutex.Lock()
	fake.getEnvironmentNameArgsForCall = append(fake.getEnvironmentNameArgsForCall, struct{}{})
	fake.recordInvocation("GetEnvironmentName", []interface{}{})
	fake.getEnvironmentNameMutex.Unlock()
	if fake.GetEnvironmentNameStub != nil {
		return fake.GetEnvironmentNameStub()
	}
	return fake.getEnvironmentNameReturns.result1
}

func (fake *FakeRuntime) GetEnvironmentNameCallCount() int {
	fake.getEnvironmentNameMutex.RLock()
	defer fake.getEnvironmentNameMutex.RUnlock()
	return len(fake.getEnvironmentNameArgsForCall)
}

func (fake *FakeRuntime) GetEnvironmentNameReturns(result1 string) {
	fake.GetEnvironmentNameStub = nil
	fake.getEnvironmentNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRuntime) GetConfigManager() (config.Manager, error) {
	fake.getConfigManagerMutex.Lock()
	fake.getConfigManagerArgsForCall = append(fake.getConfigManagerArgsForCall, struct{}{})
	fake.recordInvocation("GetConfigManager", []interface{}{})
	fake.getConfigManagerMutex.Unlock()
	if fake.GetConfigManagerStub != nil {
		return fake.GetConfigManagerStub()
	}
	return fake.getConfigManagerReturns.result1, fake.getConfigManagerReturns.result2
}

func (fake *FakeRuntime) GetConfigManagerCallCount() int {
	fake.getConfigManagerMutex.RLock()
	defer fake.getConfigManagerMutex.RUnlock()
	return len(fake.getConfigManagerArgsForCall)
}

func (fake *FakeRuntime) GetConfigManagerReturns(result1 config.Manager, result2 error) {
	fake.GetConfigManagerStub = nil
	fake.getConfigManagerReturns = struct {
		result1 config.Manager
		result2 error
	}{result1, result2}
}

func (fake *FakeRuntime) GetClient() (httpclient.Client, error) {
	fake.getClientMutex.Lock()
	fake.getClientArgsForCall = append(fake.getClientArgsForCall, struct{}{})
	fake.recordInvocation("GetClient", []interface{}{})
	fake.getClientMutex.Unlock()
	if fake.GetClientStub != nil {
		return fake.GetClientStub()
	}
	return fake.getClientReturns.result1, fake.getClientReturns.result2
}

func (fake *FakeRuntime) GetClientCallCount() int {
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	return len(fake.getClientArgsForCall)
}

func (fake *FakeRuntime) GetClientReturns(result1 httpclient.Client, result2 error) {
	fake.GetClientStub = nil
	fake.getClientReturns = struct {
		result1 httpclient.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeRuntime) GetAuthInterceptClient() (httpclient.Client, error) {
	fake.getAuthInterceptClientMutex.Lock()
	fake.getAuthInterceptClientArgsForCall = append(fake.getAuthInterceptClientArgsForCall, struct{}{})
	fake.recordInvocation("GetAuthInterceptClient", []interface{}{})
	fake.getAuthInterceptClientMutex.Unlock()
	if fake.GetAuthInterceptClientStub != nil {
		return fake.GetAuthInterceptClientStub()
	}
	return fake.getAuthInterceptClientReturns.result1, fake.getAuthInterceptClientReturns.result2
}

func (fake *FakeRuntime) GetAuthInterceptClientCallCount() int {
	fake.getAuthInterceptClientMutex.RLock()
	defer fake.getAuthInterceptClientMutex.RUnlock()
	return len(fake.getAuthInterceptClientArgsForCall)
}

func (fake *FakeRuntime) GetAuthInterceptClientReturns(result1 httpclient.Client, result2 error) {
	fake.GetAuthInterceptClientStub = nil
	fake.getAuthInterceptClientReturns = struct {
		result1 httpclient.Client
		result2 error
	}{result1, result2}
}

func (fake *FakeRuntime) GetUI() ui.UI {
	fake.getUIMutex.Lock()
	fake.getUIArgsForCall = append(fake.getUIArgsForCall, struct{}{})
	fake.recordInvocation("GetUI", []interface{}{})
	fake.getUIMutex.Unlock()
	if fake.GetUIStub != nil {
		return fake.GetUIStub()
	}
	return fake.getUIReturns.result1
}

func (fake *FakeRuntime) GetUICallCount() int {
	fake.getUIMutex.RLock()
	defer fake.getUIMutex.RUnlock()
	return len(fake.getUIArgsForCall)
}

func (fake *FakeRuntime) GetUIReturns(result1 ui.UI) {
	fake.GetUIStub = nil
	fake.getUIReturns = struct {
		result1 ui.UI
	}{result1}
}

func (fake *FakeRuntime) GetStderr() io.Writer {
	fake.getStderrMutex.Lock()
	fake.getStderrArgsForCall = append(fake.getStderrArgsForCall, struct{}{})
	fake.recordInvocation("GetStderr", []interface{}{})
	fake.getStderrMutex.Unlock()
	if fake.GetStderrStub != nil {
		return fake.GetStderrStub()
	}
	return fake.getStderrReturns.result1
}

func (fake *FakeRuntime) GetStderrCallCount() int {
	fake.getStderrMutex.RLock()
	defer fake.getStderrMutex.RUnlock()
	return len(fake.getStderrArgsForCall)
}

func (fake *FakeRuntime) GetStderrReturns(result1 io.Writer) {
	fake.GetStderrStub = nil
	fake.getStderrReturns = struct {
		result1 io.Writer
	}{result1}
}

func (fake *FakeRuntime) GetStdout() io.Writer {
	fake.getStdoutMutex.Lock()
	fake.getStdoutArgsForCall = append(fake.getStdoutArgsForCall, struct{}{})
	fake.recordInvocation("GetStdout", []interface{}{})
	fake.getStdoutMutex.Unlock()
	if fake.GetStdoutStub != nil {
		return fake.GetStdoutStub()
	}
	return fake.getStdoutReturns.result1
}

func (fake *FakeRuntime) GetStdoutCallCount() int {
	fake.getStdoutMutex.RLock()
	defer fake.getStdoutMutex.RUnlock()
	return len(fake.getStdoutArgsForCall)
}

func (fake *FakeRuntime) GetStdoutReturns(result1 io.Writer) {
	fake.GetStdoutStub = nil
	fake.getStdoutReturns = struct {
		result1 io.Writer
	}{result1}
}

func (fake *FakeRuntime) GetStdin() io.Reader {
	fake.getStdinMutex.Lock()
	fake.getStdinArgsForCall = append(fake.getStdinArgsForCall, struct{}{})
	fake.recordInvocation("GetStdin", []interface{}{})
	fake.getStdinMutex.Unlock()
	if fake.GetStdinStub != nil {
		return fake.GetStdinStub()
	}
	return fake.getStdinReturns.result1
}

func (fake *FakeRuntime) GetStdinCallCount() int {
	fake.getStdinMutex.RLock()
	defer fake.getStdinMutex.RUnlock()
	return len(fake.getStdinArgsForCall)
}

func (fake *FakeRuntime) GetStdinReturns(result1 io.Reader) {
	fake.GetStdinStub = nil
	fake.getStdinReturns = struct {
		result1 io.Reader
	}{result1}
}

func (fake *FakeRuntime) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEnvironmentMutex.RLock()
	defer fake.getEnvironmentMutex.RUnlock()
	fake.getEnvironmentNameMutex.RLock()
	defer fake.getEnvironmentNameMutex.RUnlock()
	fake.getConfigManagerMutex.RLock()
	defer fake.getConfigManagerMutex.RUnlock()
	fake.getClientMutex.RLock()
	defer fake.getClientMutex.RUnlock()
	fake.getAuthInterceptClientMutex.RLock()
	defer fake.getAuthInterceptClientMutex.RUnlock()
	fake.getUIMutex.RLock()
	defer fake.getUIMutex.RUnlock()
	fake.getStderrMutex.RLock()
	defer fake.getStderrMutex.RUnlock()
	fake.getStdoutMutex.RLock()
	defer fake.getStdoutMutex.RUnlock()
	fake.getStdinMutex.RLock()
	defer fake.getStdinMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeRuntime) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.Runtime = new(FakeRuntime)
