// This file was generated by counterfeiter
package managementfakes

import (
	"io"
	"sync"

	"github.com/dpb587/ssoca/service/openvpn/client/management"
)

type FakeServerHandler struct {
	NeedCertificateStub        func(io.Writer, string) (management.ServerHandlerCallback, error)
	needCertificateMutex       sync.RWMutex
	needCertificateArgsForCall []struct {
		arg1 io.Writer
		arg2 string
	}
	needCertificateReturns struct {
		result1 management.ServerHandlerCallback
		result2 error
	}
	SignRSAStub        func(io.Writer, string) (management.ServerHandlerCallback, error)
	signRSAMutex       sync.RWMutex
	signRSAArgsForCall []struct {
		arg1 io.Writer
		arg2 string
	}
	signRSAReturns struct {
		result1 management.ServerHandlerCallback
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServerHandler) NeedCertificate(arg1 io.Writer, arg2 string) (management.ServerHandlerCallback, error) {
	fake.needCertificateMutex.Lock()
	fake.needCertificateArgsForCall = append(fake.needCertificateArgsForCall, struct {
		arg1 io.Writer
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NeedCertificate", []interface{}{arg1, arg2})
	fake.needCertificateMutex.Unlock()
	if fake.NeedCertificateStub != nil {
		return fake.NeedCertificateStub(arg1, arg2)
	}
	return fake.needCertificateReturns.result1, fake.needCertificateReturns.result2
}

func (fake *FakeServerHandler) NeedCertificateCallCount() int {
	fake.needCertificateMutex.RLock()
	defer fake.needCertificateMutex.RUnlock()
	return len(fake.needCertificateArgsForCall)
}

func (fake *FakeServerHandler) NeedCertificateArgsForCall(i int) (io.Writer, string) {
	fake.needCertificateMutex.RLock()
	defer fake.needCertificateMutex.RUnlock()
	return fake.needCertificateArgsForCall[i].arg1, fake.needCertificateArgsForCall[i].arg2
}

func (fake *FakeServerHandler) NeedCertificateReturns(result1 management.ServerHandlerCallback, result2 error) {
	fake.NeedCertificateStub = nil
	fake.needCertificateReturns = struct {
		result1 management.ServerHandlerCallback
		result2 error
	}{result1, result2}
}

func (fake *FakeServerHandler) SignRSA(arg1 io.Writer, arg2 string) (management.ServerHandlerCallback, error) {
	fake.signRSAMutex.Lock()
	fake.signRSAArgsForCall = append(fake.signRSAArgsForCall, struct {
		arg1 io.Writer
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SignRSA", []interface{}{arg1, arg2})
	fake.signRSAMutex.Unlock()
	if fake.SignRSAStub != nil {
		return fake.SignRSAStub(arg1, arg2)
	}
	return fake.signRSAReturns.result1, fake.signRSAReturns.result2
}

func (fake *FakeServerHandler) SignRSACallCount() int {
	fake.signRSAMutex.RLock()
	defer fake.signRSAMutex.RUnlock()
	return len(fake.signRSAArgsForCall)
}

func (fake *FakeServerHandler) SignRSAArgsForCall(i int) (io.Writer, string) {
	fake.signRSAMutex.RLock()
	defer fake.signRSAMutex.RUnlock()
	return fake.signRSAArgsForCall[i].arg1, fake.signRSAArgsForCall[i].arg2
}

func (fake *FakeServerHandler) SignRSAReturns(result1 management.ServerHandlerCallback, result2 error) {
	fake.SignRSAStub = nil
	fake.signRSAReturns = struct {
		result1 management.ServerHandlerCallback
		result2 error
	}{result1, result2}
}

func (fake *FakeServerHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.needCertificateMutex.RLock()
	defer fake.needCertificateMutex.RUnlock()
	fake.signRSAMutex.RLock()
	defer fake.signRSAMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeServerHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ management.ServerHandler = new(FakeServerHandler)
