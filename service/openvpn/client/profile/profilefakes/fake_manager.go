// Code generated by counterfeiter. DO NOT EDIT.
package profilefakes

import (
	"sync"

	"github.com/dpb587/ssoca/service/openvpn/client/profile"
)

type FakeManager struct {
	GetProfileStub        func() (profile.Profile, error)
	getProfileMutex       sync.RWMutex
	getProfileArgsForCall []struct {
	}
	getProfileReturns struct {
		result1 profile.Profile
		result2 error
	}
	getProfileReturnsOnCall map[int]struct {
		result1 profile.Profile
		result2 error
	}
	IsCertificateValidStub        func() bool
	isCertificateValidMutex       sync.RWMutex
	isCertificateValidArgsForCall []struct {
	}
	isCertificateValidReturns struct {
		result1 bool
	}
	isCertificateValidReturnsOnCall map[int]struct {
		result1 bool
	}
	RenewStub        func() error
	renewMutex       sync.RWMutex
	renewArgsForCall []struct {
	}
	renewReturns struct {
		result1 error
	}
	renewReturnsOnCall map[int]struct {
		result1 error
	}
	SignStub        func([]byte) ([]byte, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 []byte
	}
	signReturns struct {
		result1 []byte
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) GetProfile() (profile.Profile, error) {
	fake.getProfileMutex.Lock()
	ret, specificReturn := fake.getProfileReturnsOnCall[len(fake.getProfileArgsForCall)]
	fake.getProfileArgsForCall = append(fake.getProfileArgsForCall, struct {
	}{})
	fake.recordInvocation("GetProfile", []interface{}{})
	fake.getProfileMutex.Unlock()
	if fake.GetProfileStub != nil {
		return fake.GetProfileStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetProfileCallCount() int {
	fake.getProfileMutex.RLock()
	defer fake.getProfileMutex.RUnlock()
	return len(fake.getProfileArgsForCall)
}

func (fake *FakeManager) GetProfileCalls(stub func() (profile.Profile, error)) {
	fake.getProfileMutex.Lock()
	defer fake.getProfileMutex.Unlock()
	fake.GetProfileStub = stub
}

func (fake *FakeManager) GetProfileReturns(result1 profile.Profile, result2 error) {
	fake.getProfileMutex.Lock()
	defer fake.getProfileMutex.Unlock()
	fake.GetProfileStub = nil
	fake.getProfileReturns = struct {
		result1 profile.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetProfileReturnsOnCall(i int, result1 profile.Profile, result2 error) {
	fake.getProfileMutex.Lock()
	defer fake.getProfileMutex.Unlock()
	fake.GetProfileStub = nil
	if fake.getProfileReturnsOnCall == nil {
		fake.getProfileReturnsOnCall = make(map[int]struct {
			result1 profile.Profile
			result2 error
		})
	}
	fake.getProfileReturnsOnCall[i] = struct {
		result1 profile.Profile
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) IsCertificateValid() bool {
	fake.isCertificateValidMutex.Lock()
	ret, specificReturn := fake.isCertificateValidReturnsOnCall[len(fake.isCertificateValidArgsForCall)]
	fake.isCertificateValidArgsForCall = append(fake.isCertificateValidArgsForCall, struct {
	}{})
	fake.recordInvocation("IsCertificateValid", []interface{}{})
	fake.isCertificateValidMutex.Unlock()
	if fake.IsCertificateValidStub != nil {
		return fake.IsCertificateValidStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isCertificateValidReturns
	return fakeReturns.result1
}

func (fake *FakeManager) IsCertificateValidCallCount() int {
	fake.isCertificateValidMutex.RLock()
	defer fake.isCertificateValidMutex.RUnlock()
	return len(fake.isCertificateValidArgsForCall)
}

func (fake *FakeManager) IsCertificateValidCalls(stub func() bool) {
	fake.isCertificateValidMutex.Lock()
	defer fake.isCertificateValidMutex.Unlock()
	fake.IsCertificateValidStub = stub
}

func (fake *FakeManager) IsCertificateValidReturns(result1 bool) {
	fake.isCertificateValidMutex.Lock()
	defer fake.isCertificateValidMutex.Unlock()
	fake.IsCertificateValidStub = nil
	fake.isCertificateValidReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeManager) IsCertificateValidReturnsOnCall(i int, result1 bool) {
	fake.isCertificateValidMutex.Lock()
	defer fake.isCertificateValidMutex.Unlock()
	fake.IsCertificateValidStub = nil
	if fake.isCertificateValidReturnsOnCall == nil {
		fake.isCertificateValidReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isCertificateValidReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeManager) Renew() error {
	fake.renewMutex.Lock()
	ret, specificReturn := fake.renewReturnsOnCall[len(fake.renewArgsForCall)]
	fake.renewArgsForCall = append(fake.renewArgsForCall, struct {
	}{})
	fake.recordInvocation("Renew", []interface{}{})
	fake.renewMutex.Unlock()
	if fake.RenewStub != nil {
		return fake.RenewStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.renewReturns
	return fakeReturns.result1
}

func (fake *FakeManager) RenewCallCount() int {
	fake.renewMutex.RLock()
	defer fake.renewMutex.RUnlock()
	return len(fake.renewArgsForCall)
}

func (fake *FakeManager) RenewCalls(stub func() error) {
	fake.renewMutex.Lock()
	defer fake.renewMutex.Unlock()
	fake.RenewStub = stub
}

func (fake *FakeManager) RenewReturns(result1 error) {
	fake.renewMutex.Lock()
	defer fake.renewMutex.Unlock()
	fake.RenewStub = nil
	fake.renewReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RenewReturnsOnCall(i int, result1 error) {
	fake.renewMutex.Lock()
	defer fake.renewMutex.Unlock()
	fake.RenewStub = nil
	if fake.renewReturnsOnCall == nil {
		fake.renewReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renewReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Sign(arg1 []byte) ([]byte, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Sign", []interface{}{arg1Copy})
	fake.signMutex.Unlock()
	if fake.SignStub != nil {
		return fake.SignStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.signReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeManager) SignCalls(stub func([]byte) ([]byte, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *FakeManager) SignArgsForCall(i int) []byte {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SignReturns(result1 []byte, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SignReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getProfileMutex.RLock()
	defer fake.getProfileMutex.RUnlock()
	fake.isCertificateValidMutex.RLock()
	defer fake.isCertificateValidMutex.RUnlock()
	fake.renewMutex.RLock()
	defer fake.renewMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ profile.Manager = new(FakeManager)
