// Code generated by counterfeiter. DO NOT EDIT.
package httpclientfakes

import (
	"sync"

	"github.com/dpb587/ssoca/service/openvpn/api"
	"github.com/dpb587/ssoca/service/openvpn/httpclient"
)

type FakeClient struct {
	BaseProfileStub        func() (string, error)
	baseProfileMutex       sync.RWMutex
	baseProfileArgsForCall []struct {
	}
	baseProfileReturns struct {
		result1 string
		result2 error
	}
	baseProfileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SignUserCSRStub        func(api.SignUserCSRRequest) (api.SignUserCSRResponse, error)
	signUserCSRMutex       sync.RWMutex
	signUserCSRArgsForCall []struct {
		arg1 api.SignUserCSRRequest
	}
	signUserCSRReturns struct {
		result1 api.SignUserCSRResponse
		result2 error
	}
	signUserCSRReturnsOnCall map[int]struct {
		result1 api.SignUserCSRResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) BaseProfile() (string, error) {
	fake.baseProfileMutex.Lock()
	ret, specificReturn := fake.baseProfileReturnsOnCall[len(fake.baseProfileArgsForCall)]
	fake.baseProfileArgsForCall = append(fake.baseProfileArgsForCall, struct {
	}{})
	fake.recordInvocation("BaseProfile", []interface{}{})
	fake.baseProfileMutex.Unlock()
	if fake.BaseProfileStub != nil {
		return fake.BaseProfileStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.baseProfileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) BaseProfileCallCount() int {
	fake.baseProfileMutex.RLock()
	defer fake.baseProfileMutex.RUnlock()
	return len(fake.baseProfileArgsForCall)
}

func (fake *FakeClient) BaseProfileCalls(stub func() (string, error)) {
	fake.baseProfileMutex.Lock()
	defer fake.baseProfileMutex.Unlock()
	fake.BaseProfileStub = stub
}

func (fake *FakeClient) BaseProfileReturns(result1 string, result2 error) {
	fake.baseProfileMutex.Lock()
	defer fake.baseProfileMutex.Unlock()
	fake.BaseProfileStub = nil
	fake.baseProfileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) BaseProfileReturnsOnCall(i int, result1 string, result2 error) {
	fake.baseProfileMutex.Lock()
	defer fake.baseProfileMutex.Unlock()
	fake.BaseProfileStub = nil
	if fake.baseProfileReturnsOnCall == nil {
		fake.baseProfileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.baseProfileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SignUserCSR(arg1 api.SignUserCSRRequest) (api.SignUserCSRResponse, error) {
	fake.signUserCSRMutex.Lock()
	ret, specificReturn := fake.signUserCSRReturnsOnCall[len(fake.signUserCSRArgsForCall)]
	fake.signUserCSRArgsForCall = append(fake.signUserCSRArgsForCall, struct {
		arg1 api.SignUserCSRRequest
	}{arg1})
	fake.recordInvocation("SignUserCSR", []interface{}{arg1})
	fake.signUserCSRMutex.Unlock()
	if fake.SignUserCSRStub != nil {
		return fake.SignUserCSRStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.signUserCSRReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) SignUserCSRCallCount() int {
	fake.signUserCSRMutex.RLock()
	defer fake.signUserCSRMutex.RUnlock()
	return len(fake.signUserCSRArgsForCall)
}

func (fake *FakeClient) SignUserCSRCalls(stub func(api.SignUserCSRRequest) (api.SignUserCSRResponse, error)) {
	fake.signUserCSRMutex.Lock()
	defer fake.signUserCSRMutex.Unlock()
	fake.SignUserCSRStub = stub
}

func (fake *FakeClient) SignUserCSRArgsForCall(i int) api.SignUserCSRRequest {
	fake.signUserCSRMutex.RLock()
	defer fake.signUserCSRMutex.RUnlock()
	argsForCall := fake.signUserCSRArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) SignUserCSRReturns(result1 api.SignUserCSRResponse, result2 error) {
	fake.signUserCSRMutex.Lock()
	defer fake.signUserCSRMutex.Unlock()
	fake.SignUserCSRStub = nil
	fake.signUserCSRReturns = struct {
		result1 api.SignUserCSRResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SignUserCSRReturnsOnCall(i int, result1 api.SignUserCSRResponse, result2 error) {
	fake.signUserCSRMutex.Lock()
	defer fake.signUserCSRMutex.Unlock()
	fake.SignUserCSRStub = nil
	if fake.signUserCSRReturnsOnCall == nil {
		fake.signUserCSRReturnsOnCall = make(map[int]struct {
			result1 api.SignUserCSRResponse
			result2 error
		})
	}
	fake.signUserCSRReturnsOnCall[i] = struct {
		result1 api.SignUserCSRResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.baseProfileMutex.RLock()
	defer fake.baseProfileMutex.RUnlock()
	fake.signUserCSRMutex.RLock()
	defer fake.signUserCSRMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ httpclient.Client = new(FakeClient)
