// Code generated by counterfeiter. DO NOT EDIT.
package httpclientfakes

import (
	"sync"

	"github.com/dpb587/ssoca/service/ssh/api"
	"github.com/dpb587/ssoca/service/ssh/httpclient"
)

type FakeClient struct {
	GetCAPublicKeyStub        func() (api.CAPublicKeyResponse, error)
	getCAPublicKeyMutex       sync.RWMutex
	getCAPublicKeyArgsForCall []struct{}
	getCAPublicKeyReturns     struct {
		result1 api.CAPublicKeyResponse
		result2 error
	}
	getCAPublicKeyReturnsOnCall map[int]struct {
		result1 api.CAPublicKeyResponse
		result2 error
	}
	PostSignPublicKeyStub        func(api.SignPublicKeyRequest) (api.SignPublicKeyResponse, error)
	postSignPublicKeyMutex       sync.RWMutex
	postSignPublicKeyArgsForCall []struct {
		arg1 api.SignPublicKeyRequest
	}
	postSignPublicKeyReturns struct {
		result1 api.SignPublicKeyResponse
		result2 error
	}
	postSignPublicKeyReturnsOnCall map[int]struct {
		result1 api.SignPublicKeyResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetCAPublicKey() (api.CAPublicKeyResponse, error) {
	fake.getCAPublicKeyMutex.Lock()
	ret, specificReturn := fake.getCAPublicKeyReturnsOnCall[len(fake.getCAPublicKeyArgsForCall)]
	fake.getCAPublicKeyArgsForCall = append(fake.getCAPublicKeyArgsForCall, struct{}{})
	fake.recordInvocation("GetCAPublicKey", []interface{}{})
	fake.getCAPublicKeyMutex.Unlock()
	if fake.GetCAPublicKeyStub != nil {
		return fake.GetCAPublicKeyStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCAPublicKeyReturns.result1, fake.getCAPublicKeyReturns.result2
}

func (fake *FakeClient) GetCAPublicKeyCallCount() int {
	fake.getCAPublicKeyMutex.RLock()
	defer fake.getCAPublicKeyMutex.RUnlock()
	return len(fake.getCAPublicKeyArgsForCall)
}

func (fake *FakeClient) GetCAPublicKeyReturns(result1 api.CAPublicKeyResponse, result2 error) {
	fake.GetCAPublicKeyStub = nil
	fake.getCAPublicKeyReturns = struct {
		result1 api.CAPublicKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetCAPublicKeyReturnsOnCall(i int, result1 api.CAPublicKeyResponse, result2 error) {
	fake.GetCAPublicKeyStub = nil
	if fake.getCAPublicKeyReturnsOnCall == nil {
		fake.getCAPublicKeyReturnsOnCall = make(map[int]struct {
			result1 api.CAPublicKeyResponse
			result2 error
		})
	}
	fake.getCAPublicKeyReturnsOnCall[i] = struct {
		result1 api.CAPublicKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PostSignPublicKey(arg1 api.SignPublicKeyRequest) (api.SignPublicKeyResponse, error) {
	fake.postSignPublicKeyMutex.Lock()
	ret, specificReturn := fake.postSignPublicKeyReturnsOnCall[len(fake.postSignPublicKeyArgsForCall)]
	fake.postSignPublicKeyArgsForCall = append(fake.postSignPublicKeyArgsForCall, struct {
		arg1 api.SignPublicKeyRequest
	}{arg1})
	fake.recordInvocation("PostSignPublicKey", []interface{}{arg1})
	fake.postSignPublicKeyMutex.Unlock()
	if fake.PostSignPublicKeyStub != nil {
		return fake.PostSignPublicKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.postSignPublicKeyReturns.result1, fake.postSignPublicKeyReturns.result2
}

func (fake *FakeClient) PostSignPublicKeyCallCount() int {
	fake.postSignPublicKeyMutex.RLock()
	defer fake.postSignPublicKeyMutex.RUnlock()
	return len(fake.postSignPublicKeyArgsForCall)
}

func (fake *FakeClient) PostSignPublicKeyArgsForCall(i int) api.SignPublicKeyRequest {
	fake.postSignPublicKeyMutex.RLock()
	defer fake.postSignPublicKeyMutex.RUnlock()
	return fake.postSignPublicKeyArgsForCall[i].arg1
}

func (fake *FakeClient) PostSignPublicKeyReturns(result1 api.SignPublicKeyResponse, result2 error) {
	fake.PostSignPublicKeyStub = nil
	fake.postSignPublicKeyReturns = struct {
		result1 api.SignPublicKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) PostSignPublicKeyReturnsOnCall(i int, result1 api.SignPublicKeyResponse, result2 error) {
	fake.PostSignPublicKeyStub = nil
	if fake.postSignPublicKeyReturnsOnCall == nil {
		fake.postSignPublicKeyReturnsOnCall = make(map[int]struct {
			result1 api.SignPublicKeyResponse
			result2 error
		})
	}
	fake.postSignPublicKeyReturnsOnCall[i] = struct {
		result1 api.SignPublicKeyResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCAPublicKeyMutex.RLock()
	defer fake.getCAPublicKeyMutex.RUnlock()
	fake.postSignPublicKeyMutex.RLock()
	defer fake.postSignPublicKeyMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ httpclient.Client = new(FakeClient)
