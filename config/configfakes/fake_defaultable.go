// This file was generated by counterfeiter
package configfakes

import (
	"sync"

	"github.com/dpb587/ssoca/config"
)

type FakeDefaultable struct {
	ApplyDefaultsStub        func()
	applyDefaultsMutex       sync.RWMutex
	applyDefaultsArgsForCall []struct{}
	invocations              map[string][][]interface{}
	invocationsMutex         sync.RWMutex
}

func (fake *FakeDefaultable) ApplyDefaults() {
	fake.applyDefaultsMutex.Lock()
	fake.applyDefaultsArgsForCall = append(fake.applyDefaultsArgsForCall, struct{}{})
	fake.recordInvocation("ApplyDefaults", []interface{}{})
	fake.applyDefaultsMutex.Unlock()
	if fake.ApplyDefaultsStub != nil {
		fake.ApplyDefaultsStub()
	}
}

func (fake *FakeDefaultable) ApplyDefaultsCallCount() int {
	fake.applyDefaultsMutex.RLock()
	defer fake.applyDefaultsMutex.RUnlock()
	return len(fake.applyDefaultsArgsForCall)
}

func (fake *FakeDefaultable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyDefaultsMutex.RLock()
	defer fake.applyDefaultsMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDefaultable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Defaultable = new(FakeDefaultable)
